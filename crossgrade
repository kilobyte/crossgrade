#!/usr/bin/perl -w
use strict;
#use Data::Dumper;
use v5.10.1;
no warnings 'experimental::smartmatch';

close STDIN;
open STDIN, '<', '/dev/null' or die "Can't open /dev/null: $?\n";

# print()/printf() that removes colours when stdout is not a terminal
sub printc
{
    local $_=shift;
    s/\e\[[0-9;]*m//g unless -t STDOUT;
    print @_? sprintf($_, @_) : $_;
}

sub diec
{
    local $_=shift;
    s/\e\[[0-9;]*m//g unless -t STDOUT;
    die @_? sprintf($_, @_) : $_;
}

sub run
{
    my ($command, $args, $errmsg, $errvar) = @_;
    $errmsg = "\e[31mE: Failed to exec $command @$args\e[0m\n" unless $errmsg;
    unless (open(RUN, "-|", $command, @$args))
    {
        printc $errmsg;
        $errvar ? $$errvar=$? : exit 1;
    };
    undef local $/;
    local $_=<RUN>;
    unless (close RUN)
    {
        printc $errmsg;
        $errvar ? $$errvar=$? : exit 1;
    };
    return $_;
}

sub run_tee
{
    my ($command, $args, $errmsg, $errvar) = @_;
    $errmsg = "\e[31mE: Failed to exec $command @$args\e[0m\n" unless $errmsg;
    unless (open(RUN, "-|", $command, @$args))
    {
        printc $errmsg;
        $errvar ? $$errvar=$? : exit 1;
    };
    local $|=1;
    local $_="";
    my ($buf,$len);
    while ($len=sysread(RUN, $buf, 1024))
    {
        print $buf;
        $_.=$buf;
    }
    unless (close RUN && defined $len)
    {
        printc $errmsg;
        $errvar ? $$errvar=$? : exit 1;
    };
    return $_;
}

sub need_root()
{
    return unless $>;
    diec "\e[31mE: Need root to continue.\e[0m\n";
}

sub apt_check()
{
    printc "\e[30;1mI: Checking apt consistency.\e[0m\n";
    run_tee("apt-get", $>?['check','-s']:['check'],
        "\e[31mE: Please fix apt breakages first.\e[0m\n"
        ."'apt-get -f install' and 'dpkg --configure -a' might be helpful.\n");
}

$#ARGV==0
    or diec "Usage: crossgrade <arch>\n";
my $target_arch = $ARGV[0];
$target_arch=~/^[a-z][a-z0-9-]*[a-z0-9]$/
    or diec "\e[31mE: Not a valid architecture '\e[0;1m$target_arch\e[0;31m'.\e[0m\n";

apt_check;

if (-x "/usr/bin/arch-test")
{
    for (system("/usr/bin/arch-test $target_arch >/dev/null"))
    {
        when (0)
        {
            printc "\e[32mG: Your machine+kernel can run \e[0;1m$target_arch\e[0;32m"
                   .".  Great!\e[0m\n";
        }
        when (2<<8)
        {
            printc "\e[33mW: Can't check whether your machine+kernel can run "
                   ."\e[0;1m$target_arch\e[0;33m.  Proceeding anyway...\e[0m\n";
        }
        default
        {
            diec "\e[31mE: Your machine+kernel cannot run "
                 ."\e[0;1m$target_arch\e[0;31m!\e[0m\n".
            ($target_arch eq "x32"?"Please add syscall.x32=y to your kernel's "
                 ."cmdline (Debian kernels) or\nset CONFIG_X86_X32=y (vanilla "
                 ."kernels), then reboot.\n":
             $target_arch eq "amd64"?"Please install an -amd64 flavour kernel,"
                 ." then reboot.\n":"");
        }
    }
}
else
{
    printc "\e[33mW: \e[0;1march-test\e[0;33m not installed, can't verify if"
           ." your kernel can run \e[0;1m$target_arch\e[0;33m.\n";
}

my $dpkg_arch=run("dpkg", ["--print-architecture"]);
chomp $dpkg_arch;
my @cur_archs=split(/\n/, run("dpkg", ["--print-foreign-architectures"]));
printc("Current architecture[s]: %s\n", join(" ", $dpkg_arch, @cur_archs));

my %cur_pkg_ver;

sub fetch_dpkg
{
    printc "\e[30;1mI: Fetching dpkg data.\e[0m\n";
    local $_=run("dpkg", ["-l"]);
    s/^Desired.*======\n//s
        or diec "\e[31mE: \e[0;1mdpkg -l\e[0;31m output lacks header.\e[0m\n";
    undef %cur_pkg_ver;
    for (split /\n/)
    {
        /^[uihrp]([ncHUFWti])([ R]) ([^ ]+) +([a-zA-Z0-9.+:~-]+) +([a-z][a-z0-9-]*[a-z0-9]) +/
            or diec "\e[31mE: Can't parse dpkg -l line:\e[0m\n$_\n";
        my ($state, $err, $pkg, $ver, $arch)=($1,$2,$3,$4,$5);
        $err eq ' '
            or diec "\e[31mE: Package \e[0;1m$pkg\e[0m:\e[1m$arch\e[0;31m is "
                ."in error state, please reinstall it!\e[0m\n";
        $state=~/^[a-z]$/
            or diec "\e[31mE: Package \e[0;1m$pkg\e[0m:\e[1m$arch\e[0;31m is "
                ."in partially installed state \e[0;1m$state\e[0;31m, please "
                ."fix or remove it!\e[0m\n";
        next if $state=~/^[nc]$/;
        $pkg=~s/:$arch//;
        $cur_pkg_ver{"$pkg:$arch"}=$ver;
    }
}

fetch_dpkg;

my (%apt_pkg_ver, %depends, %essential, %coinst);

sub fetch_apt
{
    printc "\e[30;1mI: Fetching apt data.\e[0m\n";
    local $_=run("apt-cache", ["dumpavail"]);
    undef %apt_pkg_ver;
    undef %depends;
    undef %essential;
    for (split /\n\n/)
    {
        my %f;
        $f{$1}=$2 while (/\G^([!-9;-~]+):[ \t]*((?:[^\n]|\n[ \t]+)+)\n?/gsm);
        my $entry=$_;
        for (qw(Package Version Architecture))
        {
            exists $f{$_} or diec "\e[31mE: Missing \e[0;1m$_\e[0;31m in "
                ."available in:\e[0m$entry\n";
        }
        my ($pkg,$ver,$arch,$deps,$predeps,$ess,$ma)=
            ($f{"Package"}, $f{"Version"}, $f{"Architecture"},
            $f{"Depends"}//'', $f{'Pre-Depends'},
            $f{"Essential"}, $f{"Multi-Arch"}//'no');
        $apt_pkg_ver{"$pkg:$arch"}=[] if !exists $apt_pkg_ver{"$pkg:$arch"};
        push @{$apt_pkg_ver{"$pkg:$arch"}}, $ver;

        if (defined $predeps)
        {
            $deps.=', ' if $deps ne '';
            $deps.=$predeps;
        }
        $depends{"$pkg:$arch=$ver"}=$deps;
        # In apt, being Essential in any configured distribution means you're
        # essential even if not default.
        $essential{$pkg}=1 if defined $ess;
        $coinst{"$pkg=$ver"}=($ma eq 'same');
    }
}

fetch_apt;

if (exists $apt_pkg_ver{"bash:$target_arch"})
{
    printc "\e[32mG: Apt has at least some \e[0;1m$target_arch\e[0;32m packages.\e[0m\n";
}
else
{
    printc "\e[30;1mI: Apt has no \e[0;1m$target_arch\e[30;1m packages yet.\e[0m\n";

    need_root;
    printc "\e[34;1mA: Adding \e[0;1m$target_arch\e[0;34;1m to dpkg.\e[0m\n";
    run("dpkg", ["--add-architecture", $target_arch]);
    printc "\e[34;1mA: Calling apt-get update.\e[0m\n";
    my $err;
    run_tee("apt-get", ["update"], "\e[33mW: apt-get update returned error, "
        ."let's check if we can continue...\e[0m\n", \$err);
    fetch_apt;
    exists $apt_pkg_ver{"bash:$target_arch"} or diec <<END;
\e[31mE: No \e[0;1m$target_arch\e[30;1m packages in configured sources.
Please edit \e[0;1m/etc/apt/sources.list\e[0m and add a repository containing such
binaries.
END
    printc "\e[32mG: That went ok, got some \e[0;1m$target_arch\e[0;32m packages.\e[0m\n";
    apt_check;
}

sub get_pkg_ver($)
{
    my $pkg=$_[0];
    for ("all", $dpkg_arch, @cur_archs)
    {
        my $ver=$cur_pkg_ver{"$pkg:$_"};
        return $ver if defined $ver;
    }
    undef
}

sub calc_essential
{
    sub add_essential
    {
        my $pkg=$_[0];
        #printf "pondering $pkg\n";
        my $ver=get_pkg_ver($pkg);
        unless (defined $ver)
        {
            printc "\e[33mW: Essential package \e[0;1m$pkg\e[0;33m is not "
                ."installed, assuming it's not needed.\e[0m\n";
            delete $essential{pkg};
            return;
        }
        $essential{$pkg}=$ver;

        my $deps=$depends{"$pkg:all=$ver"}//$depends{"$pkg:$target_arch=$ver"};
        unless (defined $deps)
        {
            printc "\e[33mW: Essential package \e[0;1m$pkg\e[0;33m has no "
                ."version \e[0;1m$ver\e[0;33m for \e[0;1m$target_arch\e[0;33m,"
                ."skipping it.\e[0m\n";
            delete $essential{pkg};
            return;
        }

        for (split /\s*,\s*/, $deps)
        {
            next if /^gpgv/; # MA:foreign dependency of apt
            s/\s*\| install-info$//; #moot since pre-squeeze
            s/\s*\| debconf-2\.0$//;
            s/\s*\| cdebconf$//;
            s/^awk$/mawk/; #TODO: implement provides
            printc "\e[33mW: TODO: Essential alternatives not implemented, "
                ."ignoring \e[0;1m|$2\e[0;33m after \e[0;1m$1\e[0;33m.\e[0m\n"
                if s/([^|]+?)\s+\|(.*)/$1/; #++
            s/\s*\([<=>]+\s[0-9a-zA-Z:.~+-]+\)//; #TODO: implement versions
            add_essential($_) unless exists $essential{$_};
        }
    }

    printc "\e[30;1mI: Calculating essential set.\e[0m\n";
    $essential{"apt"}=1; # apt is essential for our purposes.
    add_essential $_ for sort keys %essential;
}

calc_essential;

# is_arch_all(pkg, ver): check apt
# is_arch_all(pkg): check dpkg (only if installed)
sub is_arch_all
{
    my ($pkg,$ver)=@_;
    return exists $depends{"$pkg:all=$ver"} if defined $ver;
    return exists $cur_pkg_ver{"$pkg:all"};
}

sub is_ma_same
{
    my $pkg=$_[0];
    return 0 if is_arch_all $_;
    return $coinst{"$pkg=".get_pkg_ver($pkg)};
}

{
    my (@all,@same,@other);
    push(@{is_arch_all($_)?\@all:is_ma_same($_)?\@same:\@other}, $_)
        for sort keys %essential;

    printc "\e[1mEssential set:\e[0m\n";
    printc "\e[1mArch-indep:\e[0m ".join(" ",@all)."\n";
    printc "\e[1mLibraries:\e[0m ".join(" ",@same)."\n";
    printc "\e[1mRegular packages:\e[0m ".join(" ",@other)."\n";
}

sub crossgrade_essential_libs()
{
    my @elibs=grep {is_ma_same $_} sort keys %essential;
    @elibs=grep {!exists $cur_pkg_ver{"$_:$target_arch"}} @elibs;

    return printc "\e[32mG: All essential libraries are already done.\e[0m\n"
        unless @elibs;

    printc "\e[34;1mA: Installing essential libraries.\e[0m\n";
    run_tee("apt-get", ["install", "-y", "--no-install-recommends",
        map( ("$_:$target_arch=".get_pkg_ver($_)), @elibs)]);
}

crossgrade_essential_libs;
